CREATE TABLE owners (
    ID INT AUTO_INCREMENT PRIMARY KEY,       -- Unique ID for each user
    EMAIL VARCHAR(255) NOT NULL UNIQUE,       -- User's email (unique)
    F_NAME VARCHAR(255),                     -- Adjust VARCHAR length as needed
    L_NAME VARCHAR(255);                      -- Adjust VARCHAR length as needed
    PHONE_NUM VARCHAR(15) NOT NULL,           -- User's phone number (adjust length based on expected phone format)
    PASSWORD VARCHAR(255) NOT NULL,           -- User's password (hashed)
    resetToken VARCHAR(255),                  -- Password reset token (optional, used for password recovery)
    resetTokenExpiry DATETIME,                -- Expiry date and time for the reset token
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp for when the user account was created
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP -- Timestamp for last update
);

CREATE TABLE customers (
    ID INT AUTO_INCREMENT PRIMARY KEY,       -- Unique ID for each user
    NAME VARCHAR(255) NOT NULL,               -- User's name
    EMAIL VARCHAR(255) NOT NULL UNIQUE,       -- User's email (unique)
    PHONE_NUM VARCHAR(15) NOT NULL,           -- User's phone number (adjust length based on expected phone format)
    PASSWORD VARCHAR(255) NOT NULL,           -- User's password (hashed)
    resetToken VARCHAR(255),                  -- Password reset token (optional, used for password recovery)
    resetTokenExpiry DATETIME,                -- Expiry date and time for the reset token
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp for when the user account was created
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP -- Timestamp for last update
);

CREATE TABLE EmployeeDetails (
    EMPLOYEE_ID INT PRIMARY KEY AUTO_INCREMENT,
    USERNAME VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255) NOT NULL UNIQUE,
    F_NAME VARCHAR(50) NOT NULL,
    L_NAME VARCHAR(50) NOT NULL,
    PASSWORD VARCHAR(255) NOT NULL,
    PHONE_NUM VARCHAR(15) NOT NULL,
    ENTRY_DATE DATETIME NOT NULL,
    ROLE VARCHAR(50) NOT NULL,
    PHONE_NUM1 VARCHAR(15),
    PHONE_NUM2 VARCHAR(15),
    resetToken VARCHAR(255),
    resetTokenExpiry DATETIME,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE TABLE sizes (
    SizeID INT AUTO_INCREMENT PRIMARY KEY,
    SizeValue VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE colors (
    ColorID INT AUTO_INCREMENT PRIMARY KEY,
    ColorValue VARCHAR(50) NOT NULL UNIQUE
);


CREATE TABLE product_table (
    ProductID VARCHAR(10) PRIMARY KEY,
    ProductName VARCHAR(255) NOT NULL,
    ProductDescription TEXT,
    UnitPrice DECIMAL(10,2) NOT NULL,
    DateAdded DATE NOT NULL,
    ShippingWeight DECIMAL(5,2),  -- Weight in kg
    Category1 VARCHAR(100) NOT NULL,
    Category2 VARCHAR(100),
    Category3 VARCHAR(100),
    Material VARCHAR(100),
    FabricType VARCHAR(100),
    ReturnPolicy VARCHAR(50),
    WishlistCount INT DEFAULT 0,
    FinalRating DECIMAL(3,2) DEFAULT 0.0,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE product_variations (
    VariationID INT AUTO_INCREMENT PRIMARY KEY,
    ProductID VARCHAR(10) NOT NULL, -- Match data type with `product_table`
    SizeID INT NOT NULL,
    ColorID INT NOT NULL,
    units INT DEFAULT 0,            -- Renamed for consistency
    FOREIGN KEY (ProductID) REFERENCES product_table(ProductID) ON DELETE CASCADE,
    FOREIGN KEY (SizeID) REFERENCES sizes(SizeID),
    FOREIGN KEY (ColorID) REFERENCES colors(ColorID)
);

CREATE TABLE expenses (
    expenses_id INT AUTO_INCREMENT PRIMARY KEY,
    date DATE NOT NULL,
    expenses_name VARCHAR(255) NOT NULL,
    cost DECIMAL(10,2) NOT NULL,
    description TEXT,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


